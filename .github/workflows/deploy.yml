name: Build and Deploy Nginx

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'
        type: choice
        options:
          - main
          - master
          - develop
      force_rebuild:
        description: 'Force rebuild without cache'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip validation steps'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Validate nginx configuration
      if: ${{ !github.event.inputs.skip_tests }}
      run: |
        # Create a temporary config for testing without upstream dependencies
        cp default.conf default.conf.test
        
        # Replace upstream references with localhost for testing
        sed -i 's/portfolio-frontend:80/127.0.0.1:8080/g' default.conf.test
        sed -i 's/portfolio-backend:8000/127.0.0.1:8081/g' default.conf.test
        
        # Test nginx configuration syntax
        docker run --rm \
          -v $PWD/nginx.conf:/etc/nginx/nginx.conf:ro \
          -v $PWD/default.conf.test:/etc/nginx/conf.d/default.conf:ro \
          nginx:alpine nginx -t
        
        # Clean up test file
        rm default.conf.test

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        no-cache: ${{ github.event.inputs.force_rebuild == 'true' }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: |
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') ||
      (github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Deploy to production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          # Use latest tag for all deployments
          IMAGE_TAG="latest"
          
          # Set non-interactive mode for Docker
          export DOCKER_CLI_HINTS=false
          export DOCKER_BUILDKIT=1
          
          # Debug: Show Docker info and current login status
          echo "=== Docker Debug Info ==="
          docker version --format '{{.Client.Version}}'
          echo "Current registry logins:"
          cat ~/.docker/config.json 2>/dev/null || echo "No Docker config found"
          
          # Explicitly logout from all registries to avoid conflicts
          echo "Clearing any existing Docker logins..."
          docker logout || true
          docker logout ghcr.io || true
          docker logout docker.io || true
          
          # Check if image exists locally first
          echo "Checking for existing image..."
          if docker images --format "table {{.Repository}}:{{.Tag}}" | grep -q "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"; then
            echo "Image already exists locally, removing old version..."
            docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} || true
          fi
          
          # Login to GHCR explicitly (even for public repos to avoid Docker Hub confusion)
          echo "Logging into GHCR..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull the latest image with timeout
          echo "Pulling image from GHCR: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
          timeout 300 docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}
          
          # Logout from GHCR
          docker logout ghcr.io
          
          # Stop and remove existing container
          docker stop nginx || true
          docker rm nginx || true
          
          # Create network if it doesn't exist
          docker network create portfolio-network || true
          
          # Run new container
          docker run -d \
            --name nginx \
            --restart unless-stopped \
            -p 80:80 \
            -p 443:443 \
            --network portfolio-network \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}
          
          # Clean up old images
          docker image prune -f

  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment result
      run: |
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "✅ Nginx deployment to production successful!"
          echo "Branch: ${{ github.event.inputs.branch || github.ref_name }}"
        else
          echo "❌ Nginx deployment failed!"
          echo "Branch: ${{ github.event.inputs.branch || github.ref_name }}"
        fi 